1. Define the TreeNode class with properties for the node value, left child, and right child.
2. Define the Solution class with the following methods:
2.1. BalanceBST(root):
2.1.1. Create an empty list to store nodes.
2.1.2. Call the InOrderTraversal function with the root and the list.
2.1.3. Call the BuildBalancedBST function with the list, start index 0, and end index (list length - 1) and return the result.
2.2. InOrderTraversal(node, nodes):
2.2.1. If node is null, return.
2.2.2. Call the InOrderTraversal function with the left child of the node and the list.
2.2.3. Add the current node to the list.
2.2.4. Call the InOrderTraversal function with the right child of the node and the list.
2.3. BuildBalancedBST(nodes, start, end):
2.3.1. If start is greater than end, return null.
2.3.2. Calculate the mid index as (start + (end - start) / 2).
2.3.3. Create a new TreeNode with the value from the mid index of the list.
2.3.4. Assign the left child of the new node to the result of the BuildBalancedBST function with the list, start index, and mid index - 1.
2.3.5. Assign the right child of the new node to the result of the BuildBalancedBST function with the list, mid index + 1, and end index.
2.3.6. Return the new node.
3. In the main method:
3.1. Create the input tree.
3.2. Instantiate the Solution class.
3.3. Call the BalanceBST function with the input tree and store the result.
3.4. Print the in-order traversal of the balanced tree.1.