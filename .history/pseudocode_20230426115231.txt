function BalanceBST(root):
    nodes = empty list
    InOrderTraversal(root, nodes)
    balancedRoot = BuildBalancedBST(nodes, 0, nodes.length - 1)
    return balancedRoot

function InOrderTraversal(node, nodes):
    if node is null:
        return
    InOrderTraversal(node.left, nodes)
    nodes.append(node)
    InOrderTraversal(node.right, nodes)

function BuildBalancedBST(nodes, start, end):
    if start > end:
        return null
    mid = start + (end - start) / 2
    newNode = create new TreeNode with value from nodes[mid]
    newNode.left = BuildBalancedBST(nodes, start, mid - 1)
    newNode.right = BuildBalancedBST(nodes, mid + 1, end)
    return newNode

main:
    root = create input tree
    balancedRoot = BalanceBST(root)
    print in-order traversal of balancedRoot
